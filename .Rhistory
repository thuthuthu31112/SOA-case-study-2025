name_to = names(gdp[1])
names(gdp[1])
pivot_wider(gdp, name_from = names(gdp[1]))
View(gdp)
pivot_longer(gdp, cols = - names(gdp[1]), name_to = "Region",
values_to = "gdp"))
ivot_longer(gdp, cols = - names(gdp[1]), name_to = "Region",
values_to = "gdp")))
pivot_longer(gdp, cols = - names(gdp[1]),
name_to = "Region",
values_to = "gdp")
pivot_longer(gdp, cols = - names(gdp[1]),
names_to = "Region",
values_to = "gdp")
pivot_longer(gdp, cols = - names(gdp[1]),
names_to = "Region",
values_to = eparse(substitute(gdp)))
pivot_longer(gdp, cols = - names(gdp[1]),
names_to = "Region",
values_to = deparse(substitute(gdp)))
View(population)
trans = function (df) {
df = df %>%
pivot_longer(df, cols = - names(df[1]),
names_to = "Region",
values_to = deparse(substitute(df)))
return(df)
}
trans(population)
View(population)
population
trans(population)
trans = function (df) {
results = df %>%
pivot_longer(df, cols = - names(df[1]),
names_to = "Region",
values_to = deparse(substitute(df)))
return(results)
}
trans(population)
trans = function (df) {
results = pivot_longer(df, cols = - names(df[1]),
names_to = "Region",
values_to = deparse(substitute(df)))
return(results)
}
trans(population)
trans(population_den)
View(population)
View(population_den)
trans(house)
trans(gdp)
trans(gdp_dis)
population = trans(population)
population_den = trans(population_den)
house = trans(house)
gdp = trans(gdp)
gdp_dis = trans(gdp_dis)
population
population = trans(population) %>%
filter(Year == 2023)
library(readxl)
population <- read_excel("data/raw/Information.xlsx",
sheet = "Population")
View(population)
trans(population) %>%
filter(Year == 2023)
trans(population) %>%
filter(Year == 2024)
population = trans(population) %>%
filter(Year == 2023)
View(gdp_dis)
library(readxl)
gdp <- read_excel("data/raw/Information.xlsx",
sheet = "GDP")
View(gdp)
gdp = trans(gdp) %>%
filter(Year == 2023)
gdp
library(readxl)
population <- read_excel("data/raw/Information.xlsx",
sheet = "Population")
View(population)
library(readxl)
gdp <- read_excel("data/raw/Information.xlsx",
sheet = "GDP")
gdp = trans(gdp) %>%
filter(Year == 2023) %>%
select(-Year)
population = trans(population) %>%
filter(Year == 2023) %>%
select(-Year)
population
View(gdp)
gdp
library(purrr)
list_of_dfs = list(population, population_den,
house, gdp, gdp_dis)
df = reduce(list_of_dfs, inner_join, by = 'Region')
df
View(df)
names[df[3]] = 'pop_char'
names[df[3]]
df[3]
names(df[3])
names(df[3]) = 'pop_char'
View(df)
library(readxl)
population_den <- read_excel("data/raw/Information.xlsx",
sheet = "Population Density")
View(population_den)
population_den = trans(population_den)
list_of_dfs = list(population, population_den,
house, gdp, gdp_dis)
df = reduce(list_of_dfs, inner_join, by = 'Region')
df
View(df)
df %>%
pivot_wider(
names_from = Industry,
values_from = c(gdp_dis, population, char, population_den, Value, house, gdp),
names_sep = "_"
)
df %>%
pivot_wider(
names_from = char,
values_from = population_den
)
thu <- df %>%
pivot_wider(
names_from = char,
values_from = population_den
)
View(thu)
thu <- df %>%
pivot_wider(
names_from = char,
values_from = population_den
) %>%
pivot_wider(
names_from = Value,
values_from = house
)
thu <- df %>%
pivot_wider(
names_from = char,
values_from = population_den
) %>%
pivot_wider(
names_from = Value,
values_from = house
) %>%
pivot_wider(
names_from = Industry,
values_from = gdp_dis
)
df <- df %>%
pivot_wider(
names_from = char,
values_from = population_den
) %>%
pivot_wider(
names_from = Value,
values_from = house
) %>%
pivot_wider(
names_from = Industry,
values_from = gdp_dis
)
df = dam_data
View(thu)
View(thu)
df %>%
inner_join(thu, by = c("Region" = "Region"))
df2 = df %>%
inner_join(thu, by = c("Region" = "Region"))
df_cor = df2[sapply(df2, is.numeric)]
cor(df_cor)
df_cor = drop_na(df_cor)
cor(df_cor)
corrplot(cor)
library(corrplot)
corrplot(cor)
corrplot(cor(df_cor))
corrplot(cor(df_cor))
corrplot(cor(df_cor))
corrplot(cor(df_cor))
corrplot(cor(df_cor))
df_cor
df2
View(population)
View(Information)
View(population_den)
View(gdp_dis)
View(dam_data)
View(df2)
View(house)
library(fastDummy)
library(fastDummies)
df %>%
select(sapply(df, is.numeric)) %>%
drop_na()
df_3 = df %>%
select(names(sapply(df, is.numeric))) %>%
drop_na()
df_3
df_3 = dam_data %>%
select(names(sapply(df, is.numeric))) %>%
drop_na()
df_3
sapply(dam_data, is.numeric)
dam_data %>%
select(names(.)[sapply(dam_data, is.numeric)]) %>%
drop_na()
df_3 = dam_data %>%
select(names(.)[sapply(dam_data, is.numeric)]) %>%
drop_na()
corrplot(cor(df3))
corrplot(cor(df_3))
data = dam_data %>%
dummy_cols(select_columns = 'Region', remove_first_dummy = TRUE)
library(janitor)
names(data) = make_clean_names(names(data))
data = dam_data %>%
dummy_cols(select_columns = 'Region', remove_first_dummy = TRUE) %>%
drop_na()
names(data) = make_clean_names(names(data))
View(dam_data)
View(data)
lm(loss_given_failure_bi_qm ~ . - id - region - loss_given_failure_prop_qm - loss_given_failure_liab_qm, data = data)
data = dam_data %>%
dummy_cols(select_columns = 'Region', remove_first_dummy = TRUE) %>%
drop_na()
model = lm(loss_given_failure_bi_qm ~ . - id - region - loss_given_failure_prop_qm - loss_given_failure_liab_qm, data = data)
names(data) = make_clean_names(names(data))
model = lm(loss_given_failure_bi_qm ~ . - id - region - loss_given_failure_prop_qm - loss_given_failure_liab_qm, data = data)
summary(model)
summary(model)
data
model
View(model)
model = lm(loss_given_failure_bi_qm ~
height_m +
length_km +
volume_m3 +
year_completed +
surface_km2 +
drainage_km2 +
inspection_frequency +
distance_to_nearest_city_km +
probability_of_failure +
hazard +
region_lyndrassia +
region_navaldia,
data)
summary(model)
View(population_den)
dam_data %>%
select(- 'Loss given failure - BI (Qm)')
dam_data %>%
select(- 'Loss given failure - BI (Qm)') %>%
summary()
View(dam_data)
summary(dam_data)
names(dam_data) = make_clean_names(names(dam_data))
dam_data %>%
select(loss_given_failure_prop_qm, loss_given_failure_liab_qm, loss_given_failure_bi_qm) %>%
drop_na() %>%
corr()
dam_data %>%
select(loss_given_failure_prop_qm, loss_given_failure_liab_qm, loss_given_failure_bi_qm) %>%
drop_na() %>%
cor()
dam_data %>%
select(loss_given_failure_prop_qm, loss_given_failure_liab_qm, loss_given_failure_bi_qm) %>%
drop_na() %>%
cor()
# => tương quan yếu, coi như độc lập
#loss_give_failure
failure = dam_data %>%
select(loss_given_failure_prop_qm, length_km, volume_m3m, height_m)
# => tương quan yếu, coi như độc lập
#loss_give_failure
failure = dam_data %>%
select(loss_given_failure_prop_qm, length_km, volume_m3, height_m)
model_loss_prop = lm(loss_given_failure_prop_qm ~ ., failure)
summary(model_loss_prop)
shapiro.test(model_loss_prop$residuals)
shapiro.test(model_loss_prop$residuals)
model_loss_prop$residuals
shapiro.test(model_loss_prop$residuals)
ad.test(model_loss_prop$residuals)
library(nortest)
library(nortest)
ad.test(model_loss_prop$residuals)
library(lmtest)
ad.test(model_loss_prop$residuals)
bptest(model_loss_prop)
plot(model_loss_prop$residuals, model_loss_prop$fitted.values)
library(car)
vif(model_loss_prop)
weights <- 1 / fitted(model_loss_prop)^2
model_loss_prop_just = lm(loss_given_failure_prop_qm ~ ., failure, weight = weight)
weights <- 1 / fitted(model_loss_prop)^2
weights
model_loss_prop_just = lm(loss_given_failure_prop_qm ~ ., failure, weight = weight)
model_loss_prop_just = lm(loss_given_failure_prop_qm ~ ., failure, weights = weights)
lm(loss_given_failure_prop_qm ~ ., failure, weights = weights)
weights <- 1 / fitted(model_loss_prop)^2
weights
model_loss_prop_just = lm(loss_given_failure_prop_qm ~ ., failure, weights = weights)
length(weights)
nrow(failure)
fitted(model_loss_prop)
1 / fitted(model_loss_prop)^2
weights <- 1 / fitted(model_loss_prop)^2
lenght(weights)
length(weight)
length(weights)
length( model_loss_prop$fitted.values)
nrow(failure)
model_loss_prop = lm(loss_given_failure_prop_qm ~ ., failure)
summary(model_loss_prop)
ad.test(model_loss_prop$residuals)
source("~/.active-rstudio-document", echo=TRUE)
plot(model_loss_prop$residuals, model_loss_prop$fitted.values)
failure = dam_data %>%
select(loss_given_failure_prop_qm, length_km, volume_m3, height_m)
failure
# => tương quan yếu, coi như độc lập
#loss_give_failure
failure = dam_data %>%
select(loss_given_failure_prop_qm, length_km, volume_m3, height_m) %>%
drop_na()
model_loss_prop = lm(loss_given_failure_prop_qm ~ ., failure)
summary(model_loss_prop)
ad.test(model_loss_prop$residuals)
bptest(model_loss_prop)
plot(model_loss_prop$residuals, model_loss_prop$fitted.values)
vif(model_loss_prop)
weights <- 1 / fitted(model_loss_prop)^2
model_loss_prop_just = lm(loss_given_failure_prop_qm ~ ., failure, weights = weights)
bptest(model_loss_prop_just)
ad.test(model_loss_prop_just$residuals)
plot(model_loss_prop_just$residuals, model_loss_prop_just$fitted.values)
ad.test(model_loss_prop_just$residuals)
bptest(model_loss_prop_just)
summary(model_loss_prop_just)
dam_data
dam_data %>%
select(drainage_km2, distance_to_nearest_city_km, surface_km2, height_m, region) %>%
dummy_cols(select_columns = 'region', remove_first_dummy = TRUE)
#loss_given_liab
liab = dam_data %>%
select(drainage_km2, distance_to_nearest_city_km, surface_km2, height_m, region) %>%
dummy_cols(select_columns = 'region', remove_first_dummy = TRUE) %>%
replace_na()
liab
#loss_given_liab
liab = dam_data %>%
select(drainage_km2, distance_to_nearest_city_km, surface_km2, height_m, region) %>%
dummy_cols(select_columns = 'region', remove_first_dummy = TRUE) %>%
drop_na()
liab
#loss_given_liab
liab = dam_data %>%
select(drainage_km2, distance_to_nearest_city_km, surface_km2, height_m, region) %>%
dummy_cols(select_columns = 'region', remove_first_dummy = TRUE, remove_selected_columns = TRUE) %>%
drop_na()
liab
#loss_given_liab
liab = dam_data %>%
select(loss_given_failure_liab_qm, drainage_km2, distance_to_nearest_city_km, surface_km2, height_m, region) %>%
dummy_cols(select_columns = 'region', remove_first_dummy = TRUE, remove_selected_columns = TRUE) %>%
drop_na()
liab
model_loss_liab = lm(loss_given_failure_liab_qm ~ ., liab)
summary(model_loss_liab)
bptest(model_loss_liab)
ad.test(model_loss_liab)
ad.test(model_loss_liab$residuals)
model_loss_liab = lm(log(loss_given_failure_liab_qm) ~ ., liab)
summary(model_loss_liab)
bptest(model_loss_liab)
ad.test(model_loss_liab$residuals)
model_loss_liab = lm(loss_given_failure_liab_qm ~ ., liab)
summary(model_loss_liab)
bptest(model_loss_liab)
View(dam_data)
names(df2) = make_clean_names(names(df2))
names(df2)
df3 = df2 %>%
select(id, height_m, surface_km2, distance_to_nearest_city_km, loss_given_failure_prop_qm, population_density, region,
length_km, drainage_km2, hazard, loss_given_failure_liab_qm, regulated_dam, volume_m3, assessment, loss_given_failure_bi_qm, year_completed,
assessment_date, population, years_modified, inspection_frequency, probability_of_failure, gdp, manufacturing, transportation, agriculture,
total, population, large_urban, urban)
df3
View(df3)
df2 %>%
select(id, height_m, surface_km2, distance_to_nearest_city_km, loss_given_failure_prop_qm, region,
length_km, drainage_km2, hazard, loss_given_failure_liab_qm, regulated_dam, volume_m3, assessment, loss_given_failure_bi_qm, year_completed,
assessment_date, population, years_modified, inspection_frequency, probability_of_failure, gdp, manufacturing, transportation, agriculture,
total, population, large_urban, urban) %>%
mutate(gdp_agri = gdp*agriculture, gdp_manu = gdp*manufacturing, gdp_trans = gdp*transportation, pop_large_urban = population*large_urban/100, pop_urban = population*urban/100) %>%
select(-population, -urban, - large_urban, -agriculture, -manufacturing, -transportation)
df3 = df2 %>%
select(id, height_m, surface_km2, distance_to_nearest_city_km, loss_given_failure_prop_qm, region,
length_km, drainage_km2, hazard, loss_given_failure_liab_qm, regulated_dam, volume_m3, assessment, loss_given_failure_bi_qm, year_completed,
assessment_date, population, years_modified, inspection_frequency, probability_of_failure, gdp, manufacturing, transportation, agriculture,
total, population, large_urban, urban) %>%
mutate(gdp_agri = gdp*agriculture, gdp_manu = gdp*manufacturing, gdp_trans = gdp*transportation, pop_large_urban = population*large_urban/100, pop_urban = population*urban/100) %>%
select(-population, -urban, - large_urban, -agriculture, -manufacturing, -transportation)
failure = df3 %>%
select(loss_given_failure_prop_qm, length_km, volume_m3, height_m) %>%
drop_na()
model_loss_prop = lm(loss_given_failure_prop_qm ~ ., failure)
summary(model_loss_prop)
ad.test(model_loss_prop$residuals)
bptest(model_loss_prop)
model_loss_prop = lm(log(loss_given_failure_prop_qm) ~ ., failure)
summary(model_loss_prop)
summary(model_loss_prop)
ad.test(model_loss_prop$residuals)
bptest(model_loss_prop)
model_loss_prop = lm(loss_given_failure_prop_qm ~ ., failure)
summary(model_loss_prop)
ad.test(model_loss_prop$residuals)
bptest(model_loss_prop)
plot(model_loss_prop$residuals, model_loss_prop$fitted.values)
plot(model_loss_prop$fitted.values, model_loss_prop$residuals)
model_loss_prop = lm(loss_given_failure_prop_qm ~ . + length_km:height_m, failure)
summary(model_loss_prop)
ad.test(model_loss_prop$residuals)
bptest(model_loss_prop)
cor(failure[])
cor(df2[])
cor(sapply(df2[], is.numeric))
sapply(df2, is.numeric)
cor(sapply(df2, is.numeric))
names(sapply(df2, is.numeric))
cor(names(sapply(df2, is.numeric)))
cor(df[]names(sapply(df2, is.numeric)))
cor(df[names(sapply(df2, is.numeric))])
df[names(sapply(df2, is.numeric))]
df2[names(sapply(df2, is.numeric))]
df2 %>%
select(names(sapply(df2, is.numeric)))
sapply(df2, is.numeric) == TRUE
cor(df2 %>%
select(names(sapply(df2, is.numeric) == TRUE)) %>%
drop_na()
)
df2 %>%
select(names(sapply(df2, is.numeric) == TRUE)) %>%
drop_na()
cor(
drop_na(select(df2, where(is.numeric)))
)
thu = cor(
drop_na(select(df2, where(is.numeric)))
)
View(thu)
thu[loss_given_failure_prop_qm, ]
thu['loss_given_failure_prop_qm', ]
head(thu[, 'loss_given_failure_prop_qm'], 5)
as.data.frame(thu[, 'loss_given_failure_prop_qm'])
as.data.frame(thu[, 'loss_given_failure_prop_qm']) %>%
arrange()
as.data.frame(thu[, 'loss_given_failure_prop_qm'], names_to = 'correlation')
as.data.frame(thu[, 'loss_given_failure_prop_qm']) %>%
rename(correlation = `loss_given_failure_prop_qm`) %>%
mutate(variable = rownames(.)) %>%
arrange(correlation) %>%
head(5)
as.data.frame(thu[, 'loss_given_failure_prop_qm']) %>%
rename(correlation = `thu[, "loss_given_failure_prop_qm"]`) %>%
mutate(variable = rownames(.)) %>%
arrange(correlation) %>%
head(5)
as.data.frame(thu[, 'loss_given_failure_prop_qm']) %>%
rename(correlation = `thu[, "loss_given_failure_prop_qm"]`) %>%
mutate(variable = rownames(.)) %>%
arrange(desc(abs(correlation))) %>%
head(5)
as.data.frame(thu[, 'loss_given_failure_prop_qm']) %>%
rename(correlation = `thu[, "loss_given_failure_prop_qm"]`) %>%
mutate(variable = rownames(.)) %>%
arrange(desc(abs(correlation))) %>%
head(6)
as.data.frame(thu[, 'loss_given_failure_prop_qm']) %>%
rename(correlation = `thu[, "loss_given_failure_prop_qm"]`) %>%
mutate(variable = rownames(.)) %>%
arrange(desc(abs(correlation))) %>%
head(11)
df2
thu = cor(
drop_na(select(df3, where(is.numeric)))
)
as.data.frame(thu[, 'loss_given_failure_prop_qm']) %>%
rename(correlation = `thu[, "loss_given_failure_prop_qm"]`) %>%
mutate(variable = rownames(.)) %>%
arrange(desc(abs(correlation))) %>%
head(11)
failure = df3 %>%
select(loss_given_failure_prop_qm, length_km, volume_m3, height_m, surface_km2, drainage_km2) %>%
drop_na()
cor(failure[])
model_loss_prop = lm(loss_given_failure_prop_qm ~ . + length_km:volume_m3 + drainage_km2:surface_km2 , failure)
summary(model_loss_prop)
ad.test(model_loss_prop$residuals)
bptest(model_loss_prop)
vif(model_loss_prop)
